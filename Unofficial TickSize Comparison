import requests
import time

# Suggested URL Endpoints
SPOT_MARKETS_URL = "https://sentry.lcd.injective.network/injective/exchange/v1beta1/spot/markets"
PERP_MARKETS_URL = "https://sentry.lcd.injective.network/injective/exchange/v1beta1/derivative/markets"

# The asset Decimal counts
ASSET_DECIMALS = {
    "usdt": 6,
    "inj": 18,
    # Add other known denominations if needed
}

# Default decimals for unknown denominations
DEFAULT_DECIMALS = 6

# Tick Size Guidelines (Human Readable)
TICK_SIZE_GUIDELINES = {
    "usdt": [
        (0.0000001, 0.0000000001, 1000000),
        (0.000001, 0.000000001, 100000),
        (0.00001, 0.00000001, 10000),
        (0.0001, 0.0000001, 1000),
        (0.001, 0.000001, 100),
        (0.01, 0.00001, 10),
        (0.1, 0.0001, 1),
        (1, 0.001, 0.1),
        (10, 0.01, 0.01),
        (100, 0.01, 0.001),
        (1000, 0.1, 0.0001),
        (10000, 1, 0.0001)
    ],
    "inj": [
        (0.00000001, 0.00000000001, 100000),
        (0.0000001, 0.0000000001, 10000),
        (0.000001, 0.000000001, 1000),
        (0.00001, 0.00000001, 100),
        (0.0001, 0.0000001, 10),
        (0.001, 0.000001, 1),
        (0.01, 0.00001, 0.1),
        (0.1, 0.0001, 0.01)
    ]
}

def fetch_json(url, retries=3, delay=2):
    #Fetch JSON data from a URL with retries on failure.
    for attempt in range(retries):
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error fetching data from {url} (Attempt {attempt + 1}): {e}")
            time.sleep(delay)
    return None

def fetch_market_data():
    #Fetch spot market data.
    spot_markets = fetch_json(SPOT_MARKETS_URL)
    return spot_markets.get('markets', []) if spot_markets and isinstance(spot_markets, dict) else []

def process_spot_market_data(markets):
    expected_keys = {
        'ticker', 'base_denom', 'quote_denom',
        'maker_fee_rate', 'taker_fee_rate', 'relayer_fee_share_rate',
        'market_id', 'status', 'min_price_tick_size',
        'min_quantity_tick_size', 'min_notional', 'admin',
        'admin_permissions'
    }
    discrepancies = []

    for market in markets:
        missing_keys = expected_keys - market.keys()
        if missing_keys:
            continue  # Skip markets with missing keys

        # Get current tick sizes
        quote_denom = market['quote_denom'].lower()  # Ensure lowercase for consistency
        decimals = ASSET_DECIMALS.get(quote_denom, DEFAULT_DECIMALS)

        min_price_tick_size = convert_to_human_readable(
            float(market['min_price_tick_size']),
            decimals
        )
        min_quantity_tick_size = convert_to_human_readable(
            float(market['min_quantity_tick_size']),
            decimals
        )

        # Get expected tick sizes
        expected_tick_sizes = get_tick_sizes(min_price_tick_size, quote_denom)

        if expected_tick_sizes == (0, 0) or expected_tick_sizes == (-1, -1):
          continue  # Skip markets with no valid guidelines

        # Compare current tick sizes with expected tick sizes
        if (min_price_tick_size, min_quantity_tick_size) != expected_tick_sizes:
            expected_sizes_human_readable = (
                convert_to_human_readable(expected_tick_sizes[0], decimals),
                convert_to_human_readable(expected_tick_sizes[1], decimals)
            )
            discrepancies.append({
                'market': market.get('ticker'),
                'current_sizes': (min_price_tick_size, min_quantity_tick_size),
                'expected_sizes': expected_sizes_human_readable
            })

    return discrepancies

def convert_to_human_readable(amount, decimals):
    #Convert machine-readable amount to human-readable format.#
    return amount / (10 ** decimals)

"""
def get_tick_sizes(price, asset_type):
    #Calculate the suggested tick sizes based on the current price and asset type.
    guidelines = TICK_SIZE_GUIDELINES.get(asset_type, [])
    for min_price, min_price_tick, min_qty_tick in guidelines:
        if price >= min_price:
            return min_price_tick, min_qty_tick
    
    # Return a sentinel value indicating no valid sizes found
    return 0, 0
"""

def get_tick_sizes(price, asset_type):
    guidelines = TICK_SIZE_GUIDELINES.get(asset_type, [])
    for min_price, min_price_tick, min_qty_tick in guidelines:
        if price >= min_price:
            # Adjust expected sizes upward if necessary
            return min_price_tick * (10 ** 18), min_qty_tick * (10 ** 18)
    return 0, 0
    
    
    
def main():
    spot_markets = fetch_market_data()
    discrepancies = process_spot_market_data(spot_markets)

    if discrepancies:
        print("Discrepancies found in tick sizes:")
        for discrepancy in discrepancies:
            market_name = discrepancy.get('market', 'Unknown')
            current_sizes = discrepancy.get('current_sizes', [])
            expected_sizes = discrepancy.get('expected_sizes', [])
            #Format sizes for better readability without losing precision
            formatted_current_sizes = [f"{size:.6e}" for size in current_sizes]
            formatted_expected_sizes = [f"{size:.6e}" for size in expected_sizes]
            
            
            print(f"Market: {market_name}, "
                  f"Current Tick Sizes: {current_sizes}, "
                  f"Expected Tick Sizes: {expected_sizes}")
    else:
        print("No discrepancies detected.")

if __name__ == "__main__":
    main()
